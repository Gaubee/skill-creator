name: Auto Release to NPM

permissions:
  contents: write  # Allow pushing tags and creating releases

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-publish: ${{ steps.check.outputs.should-publish }}
      version: ${{ steps.check.outputs.version }}
      is-new-version: ${{ steps.check.outputs.is-new-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for version comparison
          token: ${{ secrets.GITHUB_TOKEN }} # Use token with write permissions

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check if package.json version changed
        id: check
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Get the latest published version from npm
          LATEST_PUBLISHED=$(npm view skill-creator version 2>/dev/null || echo "0.0.0")
          echo "Latest published: $LATEST_PUBLISHED"

          # Compare versions
          if [ "$CURRENT_VERSION" = "$LATEST_PUBLISHED" ]; then
            echo "should-publish=false" >> $GITHUB_OUTPUT
            echo "is-new-version=false" >> $GITHUB_OUTPUT
            echo "Version $CURRENT_VERSION is already published"
          else
            echo "should-publish=true" >> $GITHUB_OUTPUT
            echo "is-new-version=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "New version $CURRENT_VERSION detected"
          fi

  build-and-test:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.should-publish == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Use token with write permissions

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Type check
        run: npm run type-check

      - name: Test CLI build
        run: npm run cli -- --version

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            ./dist
            ./package.json
            ./package-lock.json
          retention-days: 7

  publish:
    runs-on: ubuntu-latest
    needs: [check-version, build-and-test]
    if: needs.check-version.outputs.should-publish == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Use token with write permissions

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .

      - name: Create Git tag
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          echo "Creating tag v$VERSION"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: Release v${{ needs.check-version.outputs.version }}
          body: |
            ## Release v${{ needs.check-version.outputs.version }}

            This is an automated release of skill-creator v${{ needs.check-version.outputs.version }}.

            ### Installation
            ```bash
            npm install -g skill-creator@${{ needs.check-version.outputs.version }}
            ```

            ### What's Changed
            - Check the commits since the last release for detailed changes
            - View the [README.md](https://github.com/gaubee/skill-creator/blob/main/README.md) for usage instructions
          draft: false
          prerelease: false

  # Create a summary job to show the results
  summary:
    runs-on: ubuntu-latest
    needs: [check-version, test, publish]
    if: always()

    steps:
      - name: Release Summary
        run: |
          echo "## 📋 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.check-version.outputs.should-publish }}" == "true" ]; then
            echo "✅ **New Version Detected**: v${{ needs.check-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "${{ needs.test.result }}" == "success" ]; then
              echo "✅ **Tests**: Passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Tests**: Failed" >> $GITHUB_STEP_SUMMARY
            fi

            if [ "${{ needs.publish.result }}" == "success" ]; then
              echo "✅ **Published**: Successfully published to NPM" >> $GITHUB_STEP_SUMMARY
              echo "📦 **Install**: \`npm install -g skill-creator@${{ needs.check-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Publish**: Failed to publish to NPM" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ **No new version**: Current version is already published" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Latest published**: v${{ needs.check-version.outputs.version || 'unknown' }}" >> $GITHUB_STEP_SUMMARY
          fi
